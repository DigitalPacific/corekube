#cloud-config
write_files:
  - path: /run/setup_etcd_cloudinit_conf.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      
      ENV="/etc/environment"
      
      # Test for RW access to $1
      touch $ENV
      if [ $? -ne 0 ]; then
          echo exiting, unable to modify: $ENV
          exit 1
      fi
      
      # Setup environment target
      sed -i -e '/^COREOS_PUBLIC_IPV4=/d' \
          -e '/^COREOS_PRIVATE_IPV4=/d' \
          "${ENV}"
          
      # We spin loop until the the IP addresses are set
      function get_ip () {
          IF=$1
          IP=
          while [ 1 ]; do
              IP=$(ifconfig $IF | awk '/inet / {print $2}')
              if [ "$IP" != "" ]; then
                  break
              fi
              sleep .1
          done
          echo $IP
      }
      
      # Echo results of IP queries to environment file as soon as network interfaces
      # get assigned IPs
      echo COREOS_PUBLIC_IPV4=$(get_ip eth0) >> $ENV # Also assigned to same IP
      echo COREOS_PRIVATE_IPV4=$(get_ip eth0) >> $ENV #eno1 should be changed to your device name
      A=`cat /etc/environment | grep COREOS_PRIVATE_IPV4 | cut -f2 -d "="`
      sed -i "s#=:#=${A}:#g" /run/systemd/system/etcd.service.d/20-cloudinit.conf
      systemctl daemon-reload
coreos:
  etcd:
    name: kubernetes_minion_%index%
    discovery: http://%discovery%:2379/v2/keys/discovery/%uuid%
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
  fleet:
    public-ip: $private_ipv4
    metadata: kubernetes_role=minion
  update:
    group: stable
    reboot-strategy: off
  units:
    - name: setup-etcd-cloudinit-conf.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Setup environment with private (and public) IP addresses
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/run/setup_etcd_cloudinit_conf.sh
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: flannel-install.service
      command: start
      content: |
        # Installs flannel
        [Unit]
        After=network-online.target
        Requires=network-online.target
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/wget -N -P /opt/bin %flannel_url%
        ExecStart=/usr/bin/chmod +x /opt/bin/flanneld
    - name: flannel.service
      command: start
      content: |
        # Configures & starts flannel
        [Unit]
        After=etcd.service flannel-install.service
        Requires=etcd.service flannel-install.service
        
        [Service]
        ExecStart=/opt/bin/flanneld -iface=%kubernetes_net_interface%
        Restart=always
        RestartSec=5s
    - name: flannel-env.path
      command: start
      content: |
        # Ensures flannel env vars are set to use with Docker
        [Path]
        PathExists=/run/flannel/subnet.env
        Unit=docker.service
    - name: docker.service
      command: start
      content: |
        # Starts new docker server that uses flannel
        [Unit]
        After=flannel-env.path network-online.target flannel.service
        Requires=flannel-env.path network-online.target flannel.service
        Description=Docker Application Container Engine
        
        [Service]
        EnvironmentFile=/run/flannel/subnet.env
        ExecStartPre=/bin/mount --make-rprivate /
        ExecStartPre=/usr/bin/systemctl kill docker.service
        ExecStart=/usr/bin/docker -d --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU}
        
        [Install]
        WantedBy=multi-user.target